# .github/workflows/ci.yml

# Name of the workflow as it appears in the GitHub Actions UI
name: CI Pipeline

# Defines when the workflow should run
on:
  # Trigger on push events to specific branches
  push:
    branches:
      - main    # Workflow runs when code is pushed to the 'main' branch
      - develop # Workflow also runs when code is pushed to a 'develop' branch (optional)

  # Trigger on pull request events targeting specific branches
  pull_request:
    branches:
      - main    # Workflow runs when a pull request targets the 'main' branch
      - develop # Workflow also runs when a pull request targets the 'develop' branch

# Defines the jobs that make up this workflow
jobs:
  # -----------------------------------------------------------------------------
  # Job 1: Code Linting
  # This job focuses on code quality checks (Pylint for Python, Hadolint for Dockerfile)
  lint:
    name: Code Linting # Display name for this job in the UI
    runs-on: ubuntu-latest # Specifies the type of runner to use (GitHub-hosted Ubuntu virtual machine)

    # Steps define the sequence of tasks to be executed within this job
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4 # Uses the actions/checkout action to get the code from the repo
                                 # @v4 ensures you're using a specific stable version of the action

      # Step 2: Set up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v5 # Uses the actions/setup-python action to install Python
        with:
          python-version: '3.x' # Specifies to use the latest stable Python 3 version

      # Step 3: Install Python dependencies
      - name: Install dependencies
        # Runs a shell command to install packages listed in requirements.txt
        # This assumes your project has a requirements.txt file at its root
        run: pip install -r requirements.txt

      # Step 4: Run Pylint for Python code linting
      - name: Run Pylint
        # Executes Pylint. Adjust 'your_app_folder' to the directory containing your Python code.
        # --fail-under=7.0 makes the step fail if the Pylint score is below 7.0 (adjust as needed).
        run: pylint --fail-under=7.0 your_app_folder
        # continue-on-error: true means that if Pylint finds errors, the job won't immediately fail.
        # It will complete, but the Pylint step will be marked as a soft failure.
        continue-on-error: true

      # Step 5: Run Hadolint for Dockerfile linting
      - name: Run Hadolint (Dockerfile Linter)
        uses: hadolint/hadolint-action@v3.1.0 # Uses the Hadolint GitHub Action
        with:
          dockerfile: Dockerfile # Specifies the path to your Dockerfile (assumed to be in the repo root)

  # -----------------------------------------------------------------------------
  # Job 2: Unit Tests
  # This job runs your project's unit tests
  test:
    name: Unit Tests # Display name for this job
    runs-on: ubuntu-latest # Runs on an Ubuntu virtual machine
    needs: lint # This job will only start after the 'lint' job has completed successfully

    # Steps define the sequence of tasks for the unit test job
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up a Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Step 3: Install Python dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Step 4: Run unit tests using Python's unittest module
      - name: Run unit tests
        # This command tells Python to discover and run all unit tests in the current directory
        # (or subdirectories) that follow standard unittest naming conventions.
        run: python -m unittest discover
