name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint -r requirements.txt

      - name: Run Pylint
        run: |
          find . -name "*.py" -not -path "*/.*" -not -path "*/migrations/*" | \
            head -20 | xargs pylint --fail-under=7.0 || echo "Pylint score below threshold"
        continue-on-error: true

      - name: Validate Dockerfile line endings
        run: |
          if [ -f "Dockerfile" ] && file Dockerfile | grep -q "CRLF"; then
            echo "::error file=Dockerfile::Dockerfile contains CRLF line endings"
            exit 1
          fi

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3013,DL3018
          failure-threshold: warning

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t my-django-app .

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, build]
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pytest pytest-cov pytest-django

      - name: Setup environment
        run: |
          echo "DJANGO_SETTINGS_MODULE=api.settings.test" >> $GITHUB_ENV
          echo "MONGO_DB_NAME=testdb" >> $GITHUB_ENV
          echo "MONGO_URI=mongodb://root:example@localhost:27017" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-$(date +%s)" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV

      - name: Wait for MongoDB
        run: |
          timeout 30s bash -c 'until mongosh --eval "db.adminCommand(\"ping\")" mongodb://root:example@localhost:27017/admin --quiet; do sleep 2; done'

      - name: Run Django tests
        run: |
          python -m pytest api/tests/ --cov=./ --cov-report=xml --ds=api.settings.test

      - name: Test version endpoint
        run: |
          python manage.py runserver 127.0.0.1:8000 &
          SERVER_PID=$!
          sleep 10
          curl -f http://127.0.0.1:8000/version || exit 1
          kill $SERVER_PID

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OpenSSF Scorecard
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          publish_results: true

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif