name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false
          submodules: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest -r requirements.txt

      - name: Run Pylint
        run: |
          if [ -d "./src" ] && [ -f "./src/__init__.py" ]; then
            pylint --fail-under=7.0 src/ || echo "::warning::Pylint score below threshold - not failing workflow"
          else
            echo "::warning::src directory is not a Python package or doesn't exist"
            pylint --fail-under=7.0 $(find . -name "*.py" -not -path "./.*/*") || echo "::warning::Pylint score below threshold - not failing workflow"
          fi
        continue-on-error: true

      - name: Check and fix Dockerfile line endings
        run: |
          if [ -f Dockerfile ]; then
            sed -i 's/\r$//' Dockerfile
            if grep -q $'\r' Dockerfile; then
              echo "::error::Dockerfile contains CRLF line endings. Convert to LF."
              exit 1
            fi
          fi

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: "DL3008,DL3013,DL3018"
          failure-threshold: warning

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-django

      - name: Set up environment variables
        run: |
          echo "DJANGO_SETTINGS_MODULE=api.settings.test" >> $GITHUB_ENV
          echo "MONGO_DB_NAME=testdb" >> $GITHUB_ENV
          echo "MONGO_HOST=mongodb://root:example@localhost:27017" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV

      - name: Wait for MongoDB to be ready
        run: sleep 10

      - name: Run tests
        run: |
          python -m pytest api/tests/ --cov=./ --cov-report=xml --ds=api.settings.test