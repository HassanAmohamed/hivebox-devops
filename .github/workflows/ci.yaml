name: CI Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
      - develop # Trigger on pushes to a development branch (optional)
  pull_request:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use the latest stable version

      - name: Set up Python
        uses: actions/setup-python@v5 # Use the latest stable version
        with:
          python-version: '3.x' # Use the latest stable Python 3 version

      - name: Install dependencies
        run: pip install -r requirements.txt # Assuming you have a requirements.txt

      - name: Run Pylint
        # Ensure pylint is installed and configure it to your project's needs
        run: pylint --fail-under=7.0 your_app_folder # Adjust 7.0 to your desired score
        # If your app.py is directly in the root, it might be 'pylint app.py'
        # Or if it's in a specific folder, e.g., 'src/': 'pylint src/'
        continue-on-error: true # Allow pipeline to continue even if linting fails

      - name: Run Hadolint (Dockerfile Linter)
        # This assumes your Dockerfile is at the root of your repo
        uses: hadolint/hadolint-action@v3.1.0 # Use a specific stable version
        with:
          dockerfile: Dockerfile # Specify the path to your Dockerfile

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint # This job will only run after the 'lint' job completes successfully

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        # Assumes your tests are discoverable by unittest in the current directory
        run: python -m unittest discover

  # Optional: Add a build job if you want to verify your Docker image builds
  # build:
  #   name: Docker Image Build
  #   runs-on: ubuntu-latest
  #   needs: test # Build only if tests pass
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build Docker image
  #       # Adjust 'your-image-name' to your desired name
  #       run: docker build -t your-image-name .